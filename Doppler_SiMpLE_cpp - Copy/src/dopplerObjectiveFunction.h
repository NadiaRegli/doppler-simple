#ifndef DOPPLER_OBJECTIVE_FUNCTION_H
#define DOPPLER_OBJECTIVE_FUNCTION_H

#include "objectiveFunction.h"

/**
 * @brief The objective function used by the optimisation solver to find the
 *        best homogeneous transform that aligns the new scan with the submap.
 *        The only configuration parameter used here is sigma to score each
 *        point in the new scan.
 */

class DopplerObjectiveFunction
{
    private:
        double sigma_;   // registration parameter
        Eigen::MatrixXd scan_;          // target scan
        int scanSize_;                  // length of the output scan
        std::vector<double> scanVel_;   // target scan velocity
        Eigen::Matrix4d Tcalib_;       // calibration matrix s

    public:

        /**
         * @brief Constructor to initialise member variables.
         * 
         * @param uncertainty       Generated by the user configuration parameter, sigma. 
         * @param scan              The scan to register to subMap.
         * @param scanVel           The scan velocity.
         * @param Tcalib            The transformation matrix from vehicle frame to aeva LiDAR frame.
         */

        DopplerObjectiveFunction(double sigma, Eigen::MatrixXd scan, std::vector<double> scanVel, Eigen::Matrix4d Tcalib);

        // overload function call operator


        /**
         * @brief Overload the function call operator.
         * 
         * @param m         Homogeneous vector hypothesis to register the scan to the subMap.
         * @return double   The registration score (sum of the score for each point).
         */
        double operator()(const column_vector& m) const;
};

#endif